<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <property name="severity" value="error" />
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf" />
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header"> -->
    <!--   <property name="headerFile" value="${checkstyle.header.file}"/> -->
    <!--   <property name="fileExtensions" value="java"/> -->
    <!-- </module> -->

    
    <module name="SuppressionCommentFilter"/>
    

    <module name="TreeWalker">
    	

        <module name="FileContentsHolder"/>
                

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle">
            <property name="scope" value="protected" />
            <property name="checkFirstSentence" value="true" />
            <property name="checkEmptyJavadoc" value="true" />
            <property name="checkHtml" value="true" />
            <property name="tokens" value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <!--         <module name="UnusedImports"> -->
        <!--             <property name="processJavadoc" value="false"/> -->
        <!--         </module> -->

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!-- maximo numero de characteres en una linea -->
        <module name="LineLength">
            <property name="max" value="120" />
            <property name="ignorePattern" value="import|package|@|//" />
        </module>

        <module name="MethodLength"/>
        <module name="ParameterNumber"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <!--module name="WhitespaceAround"/ -->
        <module name="WhitespaceAround">
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR," />

            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
        </module>
        <!-- STAR_ASSIGN GENERIC_START GENERIC_END AND TYPE_EXTENSION_AND WILDCARD_TYPE -->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <!--         <module name="EmptyBlock"/> -->
        <module name="LeftCurly"/>
        <!--         <module name="NeedBraces"/> -->
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="AvoidInlineConditionals"/>
        <!-- module name="EmptyStatement" / -->
        <!-- module name="EqualsHashCode" / -->
        <!-- module name="HiddenField"/ -->
        <module name="IllegalInstantiation" />
        <!-- module name="InnerAssignment" / -->
        <module name="MagicNumber" />
        <!-- module name="MissingSwitchDefault" / -->
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />

        <!-- Checks for class design -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- module name="DesignForExtension"/ -->
        <module name="FinalClass" />
        <module name="HideUtilityClassConstructor" />
        <module name="InterfaceIsType" />
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="false" />
        </module>


        <!-- Miscellaneous other checks. -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle" />
        <!-- module name="FinalParameters"/ -->
        <module name="Regexp">
            <property name="format" value="\s+$" />
            <property name="message" value="Line has trailing spaces." />
        </module>
        <!-- module name="TodoComment" / -->
        <module name="UpperEll" />

        <!-- extra checks ;-D -->

        <module name="ReturnCount">
            <property name="max" value="1" />
        </module>

        <!-- Checks that code doesn't rely on the "this." default, i.e. references
          to instance variables and methods of the present object are explicitly of
          the form "this.varName" or "this.methodName(args)". -->

        <!-- Currently requires this even on static variables limiting its use -->
        <!--  module name="RequireThis">
          <property name="checkFields " value="true" />
          <property name="checkMethods" value="true" />
        </module -->



        <!-- maximo numero de lineas en un metodo -->
        <!-- module name="MethodLength"> <property name="tokens" value="METHOD_DEF,
          CTOR_DEF" /> <property name="countEmpty" value="false" /> <property name="max"
          value="50" /> </module -->

        <!-- module name="ParameterNumber"> <property name="max" value="8" /> <property
          name="tokens" value="METHOD_DEF" /> </module -->


        <!-- Comprueba si el codigo está bien sangrado -->
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
        </module>


        <!-- Dado un límite, comprueba la complejidad ciclomática; ésta se mide
          por el número de sentencias if,while, do, for, ?:, catch, switch, case y
          operadores && y || (más uno) -->
        <!-- module name="CyclomaticComplexity"> <property name="max" value="10"/>
          </module -->



        <!-- The NPATH metric computes the number of possible execution paths through
          a function. It takes into account the nesting of conditional statements and
          multi-part boolean expressions (e.g., A && B, C || D, etc.). -->
        <!-- module name="NPathComplexity"> <property name="max" value="200"/>
          </module -->



        <!--The number of other classes a given class relies on -->
        <module name="ClassFanOutComplexity">
            <property name="max" value="45" />
        </module>

    </module>

</module>
